USE bankfraud;

CREATE TABLE Customer(
  customer_id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  email VARCHAR(120) UNIQUE NOT NULL,
  phone VARCHAR(20),
  region VARCHAR(50),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE Employee(
  employee_id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  role ENUM('ADMIN','EMPLOYEE') NOT NULL,
  email VARCHAR(120) UNIQUE NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE Account(
  account_id INT AUTO_INCREMENT PRIMARY KEY,
  customer_id INT NOT NULL,
  account_type ENUM('SAVINGS','CURRENT') NOT NULL,
  balance DECIMAL(12,2) NOT NULL DEFAULT 0,
  status ENUM('ACTIVE','FROZEN','CLOSED') DEFAULT 'ACTIVE',
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (customer_id) REFERENCES Customer(customer_id)
);

CREATE TABLE Loan(
  loan_id INT AUTO_INCREMENT PRIMARY KEY,
  customer_id INT NOT NULL,
  amount DECIMAL(12,2) NOT NULL,
  interest_rate DECIMAL(5,2) NOT NULL,
  tenure_months INT NOT NULL,
  status ENUM('APPLIED','APPROVED','REJECTED','DISBURSED','CLOSED') DEFAULT 'APPLIED',
  applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (customer_id) REFERENCES Customer(customer_id)
);

CREATE TABLE Transaction(
  txn_id BIGINT AUTO_INCREMENT PRIMARY KEY,
  account_id INT NOT NULL,
  txn_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  txn_type ENUM('DEPOSIT','WITHDRAW','TRANSFER_OUT','TRANSFER_IN') NOT NULL,
  amount DECIMAL(12,2) NOT NULL,
  counterparty_account INT NULL,
  channel ENUM('BRANCH','ATM','ONLINE','MOBILE') NOT NULL,
  location VARCHAR(80) NULL,
  FOREIGN KEY (account_id) REFERENCES Account(account_id)
);

CREATE TABLE UserAuth(
  user_id INT AUTO_INCREMENT PRIMARY KEY,
  username VARCHAR(60) UNIQUE NOT NULL,
  password_hash VARCHAR(255) NOT NULL,
  role ENUM('ADMIN','EMPLOYEE','CUSTOMER') NOT NULL,
  ref_id INT NOT NULL
);

CREATE TABLE FraudScore(
  score_id BIGINT AUTO_INCREMENT PRIMARY KEY,
  txn_id BIGINT NOT NULL,
  anomaly_score DOUBLE NOT NULL,
  flagged BOOLEAN DEFAULT FALSE,
  reason VARCHAR(255),
  scored_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (txn_id) REFERENCES Transaction(txn_id)
);